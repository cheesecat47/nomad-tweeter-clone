{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","fbinstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","_useState","useState","_useState2","Object","slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","newAccount","setNewAccount","_useState7","_useState8","error","setError","onChange","event","_event$target","target","name","value","onSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","data","wrap","_context","prev","next","preventDefault","createUserWithEmailAndPassword","sent","signInWithEmailAndPassword","console","log","t0","message","stop","_x","apply","this","arguments","react_default","createElement","Fragment","className","type","placeholder","required","onClick","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","react_fontawesome_index_es","icon","faTwitter","color","size","style","marginBottom","components_AuthForm","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","_ref2","window","confirm","doc","concat","id","delete","attachmentURL","refFromURL","toggleEditing","_ref3","_callee2","_context2","update","autoFocus","src","alt","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","response","abrupt","ref","child","uid","uuidv4","putString","getDownloadURL","creatorId","createdAt","Date","now","collection","add","maxLength","htmlFor","faPlus","accept","picture","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","listener","orderBy","onSnapshot","snapshot","tweetArray","docs","map","objectSpread","components_TweetFactory","components_Tweet","key","Navigation","display","justifyContent","marginTop","react_router_dom","to","marginRight","marginLeft","flexDirection","alignItems","fontsize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","components_Navigation","react_router","maxWidth","width","margin","exact","path","routes_Home","routes_Profile","routes_Auth","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Router","Boolean","currentUser","ReactDOM","render","StrictMode","components_App","document","getElementById"],"mappings":"sMAiBAA,IAASC,cAVc,CACnBC,OAAQC,0CACRC,WAAYD,sCACZE,UAAWF,sBACXG,cAAeH,kCACfI,kBAAmBJ,gBACnBK,MAAOL,+CAMJ,IAAMM,EAAaT,IACbU,EAAcV,IAASW,OACvBC,EAAYZ,IAASa,YACrBC,EAAiBd,IAASe,iFCgDxBC,EAnEE,WAAM,IAAAC,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACLI,EADKJ,EAAA,GAAAK,EAEaN,mBAAS,IAFtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEZE,EAFYD,EAAA,GAEFE,EAFEF,EAAA,GAAAG,EAGiBV,oBAAS,GAH1BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGZE,EAHYD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIOd,mBAAS,IAJhBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIZE,EAJYD,EAAA,GAILE,EAJKF,EAAA,GAMbG,EAAW,SAACC,GAAU,IAAAC,EACYD,EAA5BE,OAAUC,EADMF,EACNE,KAAMC,EADAH,EACAG,MACX,UAATD,EACAjB,EAASkB,GACO,aAATD,GACPb,EAAYc,IAGdC,EAAQ,eAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,EAAOX,GAAP,IAAAY,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbhB,EAAMiB,iBADOH,EAAAC,KAAA,GAILtB,EAJK,CAAAqB,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKQ3C,EAAY6C,+BAA+BjC,EAAOI,GAL1D,OAKLuB,EALKE,EAAAK,KAAAL,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,GAOQ3C,EAAY+C,2BAA2BnC,EAAOI,GAPtD,QAOLuB,EAPKE,EAAAK,KAAA,QASTE,QAAQC,IAAIV,GATHE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAWThB,EAASgB,EAAAS,GAAMC,SAXN,yBAAAV,EAAAW,SAAAd,EAAA,kBAAH,gBAAAe,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,GAmBd,OACIC,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACIF,EAAArB,EAAAsB,cAAA,QAAM1B,SAAUA,EACZ4B,UAAU,aACVH,EAAArB,EAAAsB,cAAA,SACIG,KAAK,QACL/B,KAAK,QACLgC,YAAY,QACZ/B,MAAOnB,EACPc,SAAUA,EACVkC,UAAU,YACVG,UAAQ,IACZN,EAAArB,EAAAsB,cAAA,SACIG,KAAK,WACL/B,KAAK,WACLgC,YAAY,WACZ/B,MAAOf,EACPU,SAAUA,EACVkC,UAAU,YACVG,UAAQ,IACZN,EAAArB,EAAAsB,cAAA,SACIG,KAAK,SACLD,UAAU,uBACV7B,MAAOX,EAAa,iBAAmB,YAC1CI,GAASiC,EAAArB,EAAAsB,cAAA,QAAME,UAAU,aAAapC,IAE3CiC,EAAArB,EAAAsB,cAAA,QAAMM,QA9BQ,WAClB3C,EAAc,SAACqB,GAAD,OAAWA,KA8BjBkB,UAAU,cACTxC,EAAa,UAAY,oBClB3B6C,EAxCF,WACT,IAAMC,EAAa,eAAAjC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,EAAOX,GAAP,IAAAG,EAAAqC,EAAA,OAAAhC,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAIL,YAHKb,EAAWH,EAArBE,OAAUC,MAIdqC,EAAW,IAAIpE,EAAWE,KAAKmE,mBACf,WAATtC,IACPqC,EAAW,IAAIpE,EAAWE,KAAKoE,oBAPjB5B,EAAAE,KAAA,EAUZ3C,EAAYsE,gBAAgBH,GAVhB,wBAAA1B,EAAAW,SAAAd,MAAH,gBAAAe,GAAA,OAAApB,EAAAqB,MAAAC,KAAAC,YAAA,GAanB,OACIC,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,iBACXH,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMC,IACnBC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,MAE3BpB,EAAArB,EAAAsB,cAACoB,EAAD,MAEArB,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,YACXH,EAAArB,EAAAsB,cAAA,UACI5B,KAAK,SACL8B,UAAU,UACVI,QAASE,GACTT,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMO,MAJ3B,yBAMAtB,EAAArB,EAAAsB,cAAA,UACI5B,KAAK,SACL8B,UAAU,UACVI,QAASE,GACTT,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMQ,MAJ3B,4CCuCDC,EAtED,SAAAhD,GAA2B,IAAxBiD,EAAwBjD,EAAxBiD,SAAUC,EAAclD,EAAdkD,QAAc5E,EACPC,oBAAS,GADFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9B6E,EAD8B3E,EAAA,GACrB4E,EADqB5E,EAAA,GAAAK,EAELN,mBAAS0E,EAASI,MAFbvE,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE9ByE,EAF8BxE,EAAA,GAEpByE,EAFoBzE,EAAA,GAI/B0E,EAAa,eAAAC,EAAAhF,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACPgD,OAAOC,QAAQ,+CADR,CAAAnD,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAGRzC,EAAU2F,IAAV,UAAAC,OAAwBZ,EAASa,KAAMC,SAH/B,WAIVd,EAASe,cAJC,CAAAxD,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKJvC,EAAe8F,WAAWhB,EAASe,eAAeD,SAL9C,wBAAAvD,EAAAW,SAAAd,MAAH,yBAAAoD,EAAApC,MAAAC,KAAAC,YAAA,GAUb2C,EAAgB,kBAAMd,EAAW,SAAC3C,GAAD,OAAWA,KAC5CV,EAAQ,eAAAoE,EAAA1F,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAgE,EAAO1E,GAAP,OAAAQ,EAAAC,EAAAI,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cACbhB,EAAMiB,iBADO0D,EAAA3D,KAAA,EAEPzC,EAAU2F,IAAV,UAAAC,OAAwBZ,EAASa,KAAMQ,OAAO,CAChDjB,KAAMC,IAHG,OAKbF,GAAW,GALE,wBAAAiB,EAAAlD,SAAAiD,MAAH,gBAAAhD,GAAA,OAAA+C,EAAA9C,MAAAC,KAAAC,YAAA,GAYd,OACIC,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,SACVwB,EACG3B,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACIF,EAAArB,EAAAsB,cAAA,QAAM1B,SAAUA,EACZ4B,UAAU,uBACVH,EAAArB,EAAAsB,cAAA,SAAOG,KAAK,OACRC,YAAY,kBACZ/B,MAAOwD,EACP7D,SAdP,SAACC,GAAU,IACNI,EAAYJ,EAAtBE,OAAUE,MAClByD,EAAYzD,IAaQgC,UAAQ,EACRyC,WAAS,EACT5C,UAAU,cACdH,EAAArB,EAAAsB,cAAA,SAAOG,KAAK,SACR9B,MAAM,eACN6B,UAAU,aAElBH,EAAArB,EAAAsB,cAAA,QAAME,UAAU,oBAAoBI,QAASmC,GAA7C,WAKJ1C,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACIF,EAAArB,EAAAsB,cAAA,UAAKwB,EAASI,MACbJ,EAASe,eACNxC,EAAArB,EAAAsB,cAAA,OAAK+C,IAAKvB,EAASe,cAAeS,IAAI,eAEzCvB,GACG1B,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,kBACXH,EAAArB,EAAAsB,cAAA,QAAMM,QAASyB,GACXhC,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMmC,OAE3BlD,EAAArB,EAAAsB,cAAA,QAAMM,QAASmC,GACX1C,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMoC,mBC2BxCC,EAtFM,SAAA5E,GAAiB,IAAd6E,EAAc7E,EAAd6E,QAAcvG,EACRC,mBAAS,IADDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3BwG,EAD2BtG,EAAA,GACpBuG,EADoBvG,EAAA,GAAAK,EAEEN,mBAAS,IAFXO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE3BmG,EAF2BlG,EAAA,GAEfmG,EAFenG,EAAA,GAI5BiB,EAAQ,eAAA0D,EAAAhF,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,EAAOX,GAAP,IAAAsE,EAAAkB,EAAAC,EAAAlC,EAAA,OAAA/C,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACC,KAAVoE,EADS,CAAAtE,EAAAE,KAAA,eAAAF,EAAA4E,OAAA,oBAIb1F,EAAMiB,iBACFqD,EAAgB,GACD,KAAfgB,EANS,CAAAxE,EAAAE,KAAA,gBAOHwE,EAAgB/G,EAAekH,MAAMC,MAArB,GAAAzB,OAA8BgB,EAAQU,IAAtC,KAAA1B,OAA6C2B,iBAP1DhF,EAAAE,KAAA,EAQcwE,EAAcO,UAAUT,EAAY,YARlD,cAQHG,EARG3E,EAAAK,KAAAL,EAAAE,KAAA,GASayE,EAASE,IAAIK,iBAT1B,QAST1B,EATSxD,EAAAK,KAAA,eAWPoC,EAAW,CACbI,KAAMyB,EACNd,gBACA2B,UAAWd,EAAQU,IACnBK,UAAWC,KAAKC,OAfPtF,EAAAE,KAAA,GAiBPzC,EAAU8H,WAAW,UAAUC,IAAI/C,GAjB5B,QAkBb8B,EAAS,IACTE,EAAc,IAnBD,yBAAAzE,EAAAW,SAAAd,MAAH,gBAAAe,GAAA,OAAAqC,EAAApC,MAAAC,KAAAC,YAAA,GAuCd,OACIC,EAAArB,EAAAsB,cAAA,QAAM1B,SAAUA,EACZ4B,UAAU,eACVH,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,2BACXH,EAAArB,EAAAsB,cAAA,SACIE,UAAU,sBACV7B,MAAOgF,EACPrF,SAzBC,SAACC,GAAU,IACNI,EAAYJ,EAAtBE,OAAUE,MAClBiF,EAASjF,IAwBG8B,KAAK,OACLC,YAAY,uBACZoE,UAAU,UACdzE,EAAArB,EAAAsB,cAAA,SAAOG,KAAK,SAAS9B,MAAM,SACvB6B,UAAU,yBAElBH,EAAArB,EAAAsB,cAAA,SAAOyE,QAAQ,cAAcvE,UAAU,uBACnCH,EAAArB,EAAAsB,cAAA,0BACAD,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAM4D,OAE3B3E,EAAArB,EAAAsB,cAAA,SACIqC,GAAG,cACHlC,KAAK,OACLwE,OAAO,UACP3G,SApCS,SAACC,GAAU,IAEtB2G,EADwB3G,EAAtBE,OAAU0G,MACI,GAEhBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAAkB,IACTC,EAAaD,EAA9BE,cAAiBD,OACzB1B,EAAc0B,IAElBJ,EAAOM,cAAcR,IA4Bb1D,MAAO,CACHmE,QAAS,KAEhB9B,GACGxD,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,2BACXH,EAAArB,EAAAsB,cAAA,OAAK+C,IAAKQ,EAAYP,IAAI,aACtB9B,MAAO,CACHoE,gBAAiB/B,KAEzBxD,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,qBACXI,QAnCM,kBAAMkD,EAAc,MAoC1BzD,EAAArB,EAAAsB,cAAA,sBACAD,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMyE,UChDhCC,EA/BF,SAAAjH,GAAiB,IAAd6E,EAAc7E,EAAd6E,QAAcvG,EACEC,mBAAS,IADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnB4I,EADmB1I,EAAA,GACX2I,EADW3I,EAAA,GAgB1B,OAbA4I,oBAAU,WACN,IAAMC,EAAWpJ,EAAU8H,WAAW,UACjCuB,QAAQ,YAAa,QACrBC,WAAW,SAAAC,GACR,IAAMC,EAAaD,EAASE,KAAKC,IAAI,SAAC/D,GAAD,OAAAnF,OAAAmJ,EAAA,EAAAnJ,CAAA,CACjCqF,GAAIF,EAAIE,IACLF,EAAItD,UAEX6G,EAAUM,KAElB,OAAO,kBAAMJ,MACd,IAGC7F,EAAArB,EAAAsB,cAAA,WACID,EAAArB,EAAAsB,cAACoG,EAAD,CAAchD,QAASA,IACvBrD,EAAArB,EAAAsB,cAAA,WACKyF,EAAOS,IAAI,SAAA7C,GACR,OACItD,EAAArB,EAAAsB,cAACqG,EAAD,CAAOC,IAAKjD,EAAMhB,GAAIb,SAAU6B,EAC5B5B,QAAS4B,EAAMa,YAAcd,EAAQU,WCgBlDyC,EAtCI,SAAAhI,GAAiB,IAAd6E,EAAc7E,EAAd6E,QAClB,OACIrD,EAAArB,EAAAsB,cAAA,WACID,EAAArB,EAAAsB,cAAA,MAAIkB,MAAO,CACPsF,QAAS,OACTC,eAAgB,SAChBC,UAAW,KAEX3G,EAAArB,EAAAsB,cAAA,UACID,EAAArB,EAAAsB,cAAC2G,EAAA,EAAD,CAAMC,GAAG,IAAI1F,MAAO,CAAE2F,YAAa,KAC/B9G,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CACIC,KAAMC,IACNC,MAAO,UACPC,KAAK,SAGjBlB,EAAArB,EAAAsB,cAAA,UACID,EAAArB,EAAAsB,cAAC2G,EAAA,EAAD,CAAMC,GAAG,WACL1F,MAAO,CACH4F,WAAY,GACZN,QAAS,OACTO,cAAe,SACfC,WAAY,SACZC,SAAU,KAEdlH,EAAArB,EAAAsB,cAACa,EAAA,EAAD,CAAiBC,KAAMoG,IAAQlG,MAAO,UAAWC,KAAK,OACtDlB,EAAArB,EAAAsB,cAAA,QAAMkB,MAAO,CAAEwF,UAAW,KACrBtD,EAAQ+D,YAAR,GAAA/E,OACMgB,EAAQ+D,YADd,cAEK,gBCcnBC,EA7CC,SAAA7I,GAA8B,IAA3B6E,EAA2B7E,EAA3B6E,QAASiE,EAAkB9I,EAAlB8I,YAClBC,EAAUC,cAD0B1K,EAEEC,mBAASsG,EAAQ+D,aAFnBpK,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnC2K,EAFmCzK,EAAA,GAEnB0K,EAFmB1K,EAAA,GAcpCuB,EAAQ,eAAA0D,EAAAhF,OAAAwB,EAAA,EAAAxB,CAAAyB,EAAAC,EAAAC,KAAG,SAAAC,EAAOX,GAAP,OAAAQ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbhB,EAAMiB,iBACFkE,EAAQ+D,cAAgBK,EAFf,CAAAzI,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAGHmE,EAAQsE,cAAc,CACxBP,YAAaK,IAJR,OAMTH,IANS,+BAAAtI,EAAAW,SAAAd,MAAH,gBAAAe,GAAA,OAAAqC,EAAApC,MAAAC,KAAAC,YAAA,GAUd,OACIC,EAAArB,EAAAsB,cAAA,OAAKE,UAAU,aACXH,EAAArB,EAAAsB,cAAA,QAAM1B,SAAUA,EAAU4B,UAAU,eAChCH,EAAArB,EAAAsB,cAAA,SAAOG,KAAK,OACRC,YAAY,eACZ0C,WAAS,EACT9E,SArBC,SAACC,GAAU,IACNI,EAAYJ,EAAtBE,OAAUE,MAClBoJ,EAAkBpJ,IAoBNA,MAAOmJ,EACPtH,UAAU,cACdH,EAAArB,EAAAsB,cAAA,SAAOG,KAAK,SACR9B,MAAM,iBACN6B,UAAU,UACVgB,MAAO,CAAEwF,UAAW,OAE5B3G,EAAArB,EAAAsB,cAAA,QAAME,UAAU,2BAA2BI,QAlC7B,WAClBhE,EAAYqL,UACZL,EAAQM,KAAK,OAgCT,aCEGC,EArCG,SAAAtJ,GAA0C,IAAvCuJ,EAAuCvJ,EAAvCuJ,WAAY1E,EAA2B7E,EAA3B6E,QAASiE,EAAkB9I,EAAlB8I,YACtC,OACItH,EAAArB,EAAAsB,cAAC2G,EAAA,EAAD,KACKmB,GAAc/H,EAAArB,EAAAsB,cAAC+H,EAAD,CAAY3E,QAASA,IACpCrD,EAAArB,EAAAsB,cAACgI,EAAA,EAAD,KACIjI,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACK6H,EACG/H,EAAArB,EAAAsB,cAAA,OAAKkB,MAAO,CACR+G,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRzB,UAAW,GACXF,QAAS,OACTC,eAAgB,WAEhB1G,EAAArB,EAAAsB,cAACgI,EAAA,EAAD,CAAOI,OAAK,EAACC,KAAK,KACdtI,EAAArB,EAAAsB,cAACsI,EAAD,CAAMlF,QAASA,KAEnBrD,EAAArB,EAAAsB,cAACgI,EAAA,EAAD,CAAOI,OAAK,EAACC,KAAK,YACdtI,EAAArB,EAAAsB,cAACuI,EAAD,CAASnF,QAASA,EAASiE,YAAaA,MAKhDtH,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACIF,EAAArB,EAAAsB,cAACgI,EAAA,EAAD,CAAOI,OAAK,EAACC,KAAK,KACdtI,EAAArB,EAAAsB,cAACwI,EAAD,YCkBjBC,MA/Cf,WAAe,IAAA5L,EACWC,oBAAS,GADpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN6L,EADM3L,EAAA,GACA4L,EADA5L,EAAA,GAAAK,EAEiBN,mBAAS,MAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENgG,EAFM/F,EAAA,GAEGuL,EAFHvL,EAAA,GA8Bb,OA1BAsI,oBAAU,WACRrJ,EAAYuM,mBAAmB,SAACC,GAG5BF,EAFEE,EAES,CACT3B,YAAa2B,EAAK3B,YAClBrD,IAAKgF,EAAKhF,IACV4D,cAAe,SAACqB,GAAD,OAAUD,EAAKpB,cAAcqB,KAGnC,MAEbJ,GAAQ,MAET,IAaD5I,EAAArB,EAAAsB,cAAAD,EAAArB,EAAAuB,SAAA,KACGyI,EACC3I,EAAArB,EAAAsB,cAACgJ,EAAD,CACE5F,QAASA,EACT0E,WAAYmB,QAAQ7F,GACpBiE,YAhBY,WAClB,IAAMyB,EAAOxM,EAAY4M,YACzBN,EAAW,CACTzB,YAAa2B,EAAK3B,YAClBrD,IAAKgF,EAAKhF,IACV4D,cAAe,SAACqB,GAAD,OAAUD,EAAKpB,cAAcqB,SAcxC,mCCtCVI,EAASC,OACPrJ,EAAArB,EAAAsB,cAACD,EAAArB,EAAM2K,WAAP,KACEtJ,EAAArB,EAAAsB,cAACsJ,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.10c7a0bc.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport \"firebase/auth\"\nimport \"firebase/firestore\"\nimport \"firebase/storage\"\nimport firebase from \"firebase/app\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGE_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const fbinstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from '../fbase';\nimport React, { useState } from 'react';\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(false);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const { target: { name, value } } = event;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\") {\n            setPassword(value);\n        }\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            let data;\n            if (newAccount) {\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                data = await authService.signInWithEmailAndPassword(email, password);\n            }\n            console.log(data);\n        } catch (error) {\n            setError(error.message);\n        }\n    }\n\n    const toggleAccount = () => {\n        setNewAccount((prev) => !prev);\n    }\n\n    return (\n        <>\n            <form onSubmit={onSubmit}\n                className=\"container\">\n                <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                    required />\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                    required />\n                <input\n                    type=\"submit\"\n                    className=\"authInput authSubmit\"\n                    value={newAccount ? \"Create Account\" : \"Sign In\"} />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount}\n                className=\"authSwitch\">\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    )\n};\n\nexport default AuthForm;","import { authService, fbinstance } from '../fbase';\nimport { faTwitter, faGoogle, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AuthForm from '../components/AuthForm';\nimport React from 'react';\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n        const { target: { name } } = event;\n\n        let provider;\n        if (name === \"google\") {\n            provider = new fbinstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new fbinstance.auth.GithubAuthProvider();\n        }\n\n        await authService.signInWithPopup(provider);\n    }\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }} />\n\n            <AuthForm />\n\n            <div className=\"authBtns\">\n                <button\n                    name=\"google\"\n                    className=\"authBtn\"\n                    onClick={onSocialClick}>\n                    <FontAwesomeIcon icon={faGoogle} /> Continue with Google\n                </button>\n                <button\n                    name=\"github\"\n                    className=\"authBtn\"\n                    onClick={onSocialClick}>\n                    <FontAwesomeIcon icon={faGithub} /> Continue with GitHub\n                </button>\n            </div>\n        </div>)\n};\n\nexport default Auth;","import { dbService, storageService } from '../fbase';\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from 'react';\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n        if (ok) {\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            if (tweetObj.attachmentURL) {\n                await storageService.refFromURL(tweetObj.attachmentURL).delete();\n            }\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text: newTweet,\n        });\n        setEditing(false);\n    }\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setNewTweet(value);\n    }\n\n    return (\n        <div className=\"tweet\">\n            {editing ? (\n                <>\n                    <form onSubmit={onSubmit}\n                        className=\"container tweetEdit\">\n                        <input type=\"text\"\n                            placeholder=\"Edit your tweet\"\n                            value={newTweet}\n                            onChange={onChange}\n                            required\n                            autoFocus\n                            className=\"formInput\" />\n                        <input type=\"submit\"\n                            value=\"Update Tweet\"\n                            className=\"formBtn\" />\n                    </form>\n                    <span className=\"formBtn cancelBtn\" onClick={toggleEditing}>\n                        Cancel\n                    </span>\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentURL && (\n                        <img src={tweetObj.attachmentURL} alt=\"attachment\" />\n                    )}\n                    {isOwner && (\n                        <div className=\"tweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default Tweet;","import { dbService, storageService } from '../fbase';\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { v4 as uuidv4 } from 'uuid';\nimport React, { useState } from 'react';\n\nconst TweetFactory = ({ userObj }) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        if (tweet === \"\") {\n            return;\n        }\n        event.preventDefault();\n        let attachmentURL = \"\";\n        if (attachment !== \"\") {\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            attachmentURL = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet,\n            attachmentURL,\n            creatorId: userObj.uid,\n            createdAt: Date.now(),\n        }\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setTweet(value);\n    }\n    const onFileChange = (event) => {\n        const { target: { files } } = event;\n        const picture = files[0];\n\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const { currentTarget: { result } } = finishedEvent;\n            setAttachment(result);\n        }\n        reader.readAsDataURL(picture);\n    }\n\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n        <form onSubmit={onSubmit}\n            className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                    className=\"factoryInput__input\"\n                    value={tweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength=\"{120}\" />\n                <input type=\"submit\" value=\"&rarr;\"\n                    className=\"factoryInput__arrow\" />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input\n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                    opacity: 0,\n                }} />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img src={attachment} alt=\"attachment\"\n                        style={{\n                            backgroundImage: attachment,\n                        }} />\n                    <div className=\"factoryForm__clear\"\n                        onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            )}\n        </form>\n    )\n}\n\nexport default TweetFactory;","import { dbService } from '../fbase';\nimport React, { useState, useEffect } from 'react';\nimport Tweet from '../components/Tweet';\nimport TweetFactory from '../components/TweetFactory';\n\nconst Home = ({ userObj }) => {\n    const [tweets, setTweets] = useState([]);\n\n    useEffect(() => {\n        const listener = dbService.collection('tweets')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(snapshot => {\n                const tweetArray = snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    ...doc.data(),\n                }));\n                setTweets(tweetArray);\n            })\n        return () => listener();\n    }, []);\n\n    return (\n        <div>\n            <TweetFactory userObj={userObj} />\n            <div>\n                {tweets.map(tweet => {\n                    return (\n                        <Tweet key={tweet.id} tweetObj={tweet}\n                            isOwner={tweet.creatorId === userObj.uid} />\n                    )\n                })}\n            </div>\n        </div>\n    )\n};\n\nexport default Home;","import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from \"react-router-dom\";\nimport React from 'react';\n\nconst Navigation = ({ userObj }) => {\n    return (\n        <nav>\n            <ul style={{\n                display: 'flex',\n                justifyContent: 'center',\n                marginTop: 50\n            }}>\n                <li>\n                    <Link to=\"/\" style={{ marginRight: 10 }}>\n                        <FontAwesomeIcon\n                            icon={faTwitter}\n                            color={\"#04AAFF\"}\n                            size=\"2x\" />\n                    </Link>\n                </li>\n                <li>\n                    <Link to=\"/profile\"\n                        style={{\n                            marginLeft: 10,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            fontsize: 12\n                        }}>\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                        <span style={{ marginTop: 10 }}>\n                            {userObj.displayName ?\n                                `${userObj.displayName}'s Profile`\n                                : \"Profile\"}\n                        </span>\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    )\n};\n\nexport default Navigation;","import { authService } from '../fbase';\nimport { useHistory } from 'react-router-dom';\nimport React, { useState } from 'react';\n\nconst Profile = ({ userObj, refreshUser }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setNewDisplayName(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            refreshUser();\n        };\n    }\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input type=\"text\"\n                    placeholder=\"Display name\"\n                    autoFocus\n                    onChange={onChange}\n                    value={newDisplayName}\n                    className=\"formInput\" />\n                <input type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{ marginTop: 10, }} />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    )\n};\n\nexport default Profile;","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Auth from '../routes/Auth';\nimport Home from '../routes/Home';\nimport Navigation from './Navigation';\nimport Profile from '../routes/Profile';\nimport React from 'react';\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                <>\n                    {isLoggedIn ? (\n                        <div style={{\n                            maxWidth: 890,\n                            width: '100%',\n                            margin: '0 auto',\n                            marginTop: 80,\n                            display: 'flex',\n                            justifyContent: 'center',\n                        }}>\n                            <Route exact path=\"/\">\n                                <Home userObj={userObj} />\n                            </Route>\n                            <Route exact path=\"/profile\">\n                                <Profile userObj={userObj} refreshUser={refreshUser} />\n                            </Route>\n                            {/* <Redirect from=\"*\" to=\"/\" /> */}\n                        </div>\n                    ) : (\n                        <>\n                            <Route exact path=\"/\">\n                                <Auth />\n                            </Route>\n                            {/* <Redirect from=\"*\" to=\"/\" /> */}\n                        </>\n                    )}\n                </>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter;","import { authService } from '../fbase';\nimport AppRouter from './Router';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // setUserObj(user); // too big\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        })\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    // setUserObj(Object.assign({}, user));\n  }\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          userObj={userObj}\n          isLoggedIn={Boolean(userObj)}\n          refreshUser={refreshUser}\n        />\n      ) : (\n          \"Initializing...\"\n        )\n      }\n      {/* <footer>&copy; {new Date().getFullYear()} nomad-tweeter-clone</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import \"./assets/css/styles.css\";\nimport App from './components/App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}